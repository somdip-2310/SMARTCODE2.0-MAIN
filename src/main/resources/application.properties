# Application Configuration
spring.application.name=smart-code-review
server.port=8083
spring.profiles.active=${SPRING_PROFILES_ACTIVE:local}

# Remove all OAuth2 dependencies
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration

# GitHub API Configuration (Token Required)
github.api.token.required=true
github.api.token.validation=true
github.api.base-url=https://api.github.com
github.rate-limit=5000
github.timeout=30000

# Thymeleaf Configuration
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# Session Configuration
spring.session.store-type=none

# Database Configuration (H2 for local development)
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false

# AWS Configuration
aws.credentials.profile=default
aws.region=us-east-1
aws.profile=default

# DynamoDB Configuration
aws.dynamodb.tables.sessions=${DYNAMODB_SESSIONS_TABLE:smartcode-sessions}
aws.dynamodb.tables.analysis-results=${DYNAMODB_ANALYSIS_TABLE:smartcode-analysis-results}
aws.dynamodb.tables.issue-details=${DYNAMODB_ISSUES_TABLE:smartcode-issue-details}

# S3 Configuration
aws.s3.bucket=${S3_BUCKET:smartcode-temp-storage-1751306905}

# Lambda Configuration
aws.lambda.functions.screening=${LAMBDA_SCREENING_ARN:arn:aws:lambda:us-east-1:257394460825:function:smartcode-screening-analyzer}
aws.lambda.functions.detection=${LAMBDA_DETECTION_ARN:arn:aws:lambda:us-east-1:257394460825:function:smartcode-issue-detector}
aws.lambda.functions.suggestions=${LAMBDA_SUGGESTIONS_ARN:arn:aws:lambda:us-east-1:257394460825:function:smartcode-suggestion-generator}

# SQS Configuration
aws.sqs.queue-url=${SQS_QUEUE_URL:https://sqs.us-east-1.amazonaws.com/257394460825/smartcode-analysis-queue.fifo}

# Email Configuration
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:your-email@gmail.com}
spring.mail.password=${MAIL_PASSWORD:your-app-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.test-connection=false

# Session Management
session.duration=3600
session.scan-limit=3
session.otp-expiry=300
session.otp-length=6

# Analysis Configuration
analysis.max-file-size=20971520
analysis.max-files-per-scan=50
analysis.supported-extensions=.java,.py,.js,.ts,.cs,.go,.rb,.php,.cpp,.c,.kt,.scala,.swift
analysis.excluded-patterns=**/test/**,**/tests/**,**/node_modules/**,**/__pycache__/**,**/target/**,**/build/**,**/dist/**,**/.git/**,**/vendor/**,**/coverage/**

# Bedrock Configuration
bedrock.region=us-east-1
bedrock.models.micro=amazon.nova-micro-v1:0
bedrock.models.lite=amazon.nova-lite-v1:0
bedrock.models.premier=amazon.nova-premier-v1:0

# Logging Configuration
logging.level.root=INFO
logging.level.com.somdiproy.smartcodereview=DEBUG
logging.level.org.springframework.security=WARN
logging.level.software.amazon.awssdk=WARN
logging.file.name=logs/smart-code-review.log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always

# Error Handling
server.error.whitelabel.enabled=false
server.error.path=/error

# Jackson Configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC
spring.jackson.default-property-inclusion=NON_NULL

# GitHub Repository Analysis Configuration
github.analysis.parallel-downloads=5
github.analysis.retry-attempts=3
github.analysis.timeout-per-file=10000

#Batch COnfigurations
analysis.batch.size=10
analysis.batch.max-payload-size=200000
analysis.batch.delay-ms=500
analysis.batch.enabled=true

# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.github-api.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.github-api.wait-duration-in-open-state=30000


# Aggressive Lambda timeout optimization for Nova rate limiting
aws.lambda.timeout.screening=90
# 30 minutes for detection
aws.lambda.timeout.detection=1800
# 40 minutes for suggestions with rate limiting
aws.lambda.timeout.suggestions=2400

# Enhanced Lambda client configuration for rate limiting scenarios
aws.lambda.client.connection-timeout=120
  # 1 hour socket timeout
aws.lambda.client.socket-timeout=3600
  # 1 hour API call timeout
aws.lambda.client.api-call-timeout=3600
# 15 minutes per attempt
aws.lambda.client.api-call-attempt-timeout=900

# Rate limiting optimization
# Prevent multiple Lambda instances
aws.lambda.rate-limit.max-concurrent-executions=1
aws.lambda.rate-limit.min-interval-between-calls=5000
aws.lambda.rate-limit.exponential-backoff-enabled=true

# Circuit breaker configuration for rate limiting
aws.lambda.circuit-breaker.failure-threshold=3
  # 5 minutes
aws.lambda.circuit-breaker.timeout=300000
aws.lambda.circuit-breaker.half-open-max-calls=1

  # Process one issue at a time to reduce rate limiting
aws.lambda.batch.suggestions.size=1
  # 10 seconds between batches
aws.lambda.batch.suggestions.delay=10000
aws.lambda.batch.suggestions.max-retry-attempts=5
aws.lambda.batch.suggestions.exponential-backoff-multiplier=2

# Batch processing configuration
aws.lambda.batch.detection.size=3
aws.lambda.batch.detection.max-payload=30000
aws.lambda.batch.processing.delay=2000

# Increase timeouts for Lambda calls
aws.lambda.client.timeout=1800
server.servlet.session.timeout=30


# Server configuration
server.tomcat.connection-timeout=1800000
server.tomcat.async-timeout=1800000
server.tomcat.max-connections=200
server.tomcat.accept-count=100
server.connection-timeout=1800000

# Request timeout
spring.mvc.async.request-timeout=1800000
server.servlet.request.timeout=1800000
server.servlet.async.timeout=1800000

# Hybrid Strategy Configuration
analysis.hybrid-strategy.enabled=true
analysis.hybrid-strategy.nova-lite-percentage=90
analysis.hybrid-strategy.template-percentage=9
analysis.hybrid-strategy.nova-premier-percentage=1
analysis.hybrid-strategy.critical-only-premier=true

# Lambda Environment Variables for Hybrid Mode
aws.lambda.env.TEMPLATE_MODE_ENABLED=true
aws.lambda.env.HYBRID_STRATEGY_ENABLED=true
aws.lambda.env.NOVA_LITE_FALLBACK=true

# Cost optimization settings
analysis.cost-optimization.enabled=true
analysis.cost-optimization.max-issues-per-scan=25
analysis.cost-optimization.skip-low-priority=true