name: Deploy SmartCode to ECS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-smartcode
  ECS_SERVICE: somdip-smartcode-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-smartcode
  CONTAINER_NAME: smartcode
  LOG_GROUP: /ecs/somdip-smartcode

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Skip tests in CI for faster deployment
    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push in one step
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create task definition
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cat > task-definition.json << EOF
        {
          "family": "$ECS_TASK_DEFINITION",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::257394460825:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::257394460825:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 8083,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "environment": [
                {"name": "SPRING_PROFILES_ACTIVE", "value": "production"},
                {"name": "SERVER_PORT", "value": "8083"},
                {"name": "AWS_REGION", "value": "$AWS_REGION"},
                {"name": "AWS_DEFAULT_REGION", "value": "$AWS_REGION"},
                {"name": "AWS_BEDROCK_REGION", "value": "us-east-1"},
                {"name": "AWS_BEDROCK_MODEL_ID", "value": "anthropic.claude-3-sonnet-20240229-v1:0"},
                {"name": "AWS_S3_BUCKET", "value": "smartcode-uploads"},
                {"name": "CORS_ALLOWED_ORIGINS", "value": "https://smartcode.somdip.dev,https://somdip.dev"},
                {"name": "DEMO_SESSION_DURATION", "value": "7"},
                {"name": "ANALYSIS_CODE_MAX_SIZE", "value": "100000"},
                {"name": "ANALYSIS_FILE_MAX_SIZE", "value": "52428800"},
                {"name": "PORTFOLIO_SERVICE_URL", "value": "https://somdip.dev"},
                {"name": "HR_DEMO_SERVICE_URL", "value": "https://demos.somdip.dev"},
                {"name": "GOOGLE_ANALYTICS_ID", "value": "G-TJMD3KM77H"},
                {"name": "GOOGLE_ANALYTICS_ENABLED", "value": "true"},
                {"name": "JAVA_OPTS", "value": "-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"},
                {"name": "SINGLE_INSTANCE_MODE", "value": "true"},
                {"name": "SENDGRID_API_KEY", "value": "${{ secrets.SENDGRID_API_KEY }}"},
                {"name": "SENDGRID_ENABLED", "value": "true"},
                {"name": "SENDGRID_FROM_EMAIL", "value": "smartcode@somdip.dev"},
                {"name": "SENDGRID_FROM_NAME", "value": "SmartCode Review"},
                {"name": "logging.otp.enabled", "value": "false"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "$LOG_GROUP",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 60
              }
            }
          ]
        }
        EOF

    - name: Register task definition
      id: task-def
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "task-def-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition ${{ steps.task-def.outputs.task-def-arn }} \
          --desired-count 1 \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100" \
          --health-check-grace-period-seconds 300 \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        # Wait up to 10 minutes for service to stabilize
        timeout 600 aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          || echo "Service did not stabilize in 10 minutes, checking status..."
        
        echo "Deployment status:"
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].[serviceName,status,runningCount,desiredCount,pendingCount]' \
          --output table
        
        # Check target health if target group exists
        TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups \
          --names smartcode-service-tg \
          --query 'TargetGroups[0].TargetGroupArn' \
          --output text 2>/dev/null || echo "")
        
        if [ ! -z "$TARGET_GROUP_ARN" ] && [ "$TARGET_GROUP_ARN" != "None" ]; then
          echo "Target health status:"
          aws elbv2 describe-target-health \
            --target-group-arn $TARGET_GROUP_ARN \
            --query 'TargetHealthDescriptions[*].[Target.Id,TargetHealth.State,TargetHealth.Reason]' \
            --output table
        fi
        
    - name: Deployment summary
      run: |
        echo ""
        echo "ðŸš€ SmartCode Deployment Summary"
        echo "==============================="
        echo "âœ… Image: ${{ steps.build-image.outputs.image }}"
        echo "âœ… Task Definition: ${{ steps.task-def.outputs.task-def-arn }}"
        echo "âœ… Deployment: COMPLETED"
        echo ""
        echo "ðŸ’° Cost: Single instance mode (saves ~$8-10/month)"
        echo ""
        echo "ðŸ”— URLs:"
        echo "   Production: https://smartcode.somdip.dev"
        echo "   API Health: https://smartcode.somdip.dev/actuator/health"
        echo ""

    - name: Cleanup
      run: rm -f task-definition*.json
